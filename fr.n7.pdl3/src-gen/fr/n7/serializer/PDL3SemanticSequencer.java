/*
 * generated by Xtext 2.38.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.pDL3.GuidanceRef;
import fr.n7.pDL3.PDL3Package;
import fr.n7.pDL3.WorkDefinitionRef;
import fr.n7.pDL3.WorkSequenceRef;
import fr.n7.services.PDL3GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PDL3SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PDL3GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PDL3Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PDL3Package.GUIDANCE_REF:
				sequence_GuidanceRef(context, (GuidanceRef) semanticObject); 
				return; 
			case PDL3Package.PROCESS:
				sequence_Process(context, (fr.n7.pDL3.Process) semanticObject); 
				return; 
			case PDL3Package.WORK_DEFINITION_REF:
				sequence_WorkDefinitionRef(context, (WorkDefinitionRef) semanticObject); 
				return; 
			case PDL3Package.WORK_SEQUENCE_REF:
				sequence_WorkSequenceRef(context, (WorkSequenceRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     GuidanceRef returns GuidanceRef
	 *
	 * Constraint:
	 *     text=STRING
	 * </pre>
	 */
	protected void sequence_GuidanceRef(ISerializationContext context, GuidanceRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PDL3Package.Literals.GUIDANCE_REF__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL3Package.Literals.GUIDANCE_REF__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuidanceRefAccess().getTextSTRINGTerminalRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Process returns Process
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (workDefinitions+=WorkDefinitionRef workDefinitions+=WorkDefinitionRef*)? 
	 *         (workSequences+=WorkSequenceRef workSequences+=WorkSequenceRef*)? 
	 *         (guidances+=GuidanceRef guidances+=GuidanceRef*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Process(ISerializationContext context, fr.n7.pDL3.Process semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkDefinitionRef returns WorkDefinitionRef
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_WorkDefinitionRef(ISerializationContext context, WorkDefinitionRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PDL3Package.Literals.WORK_DEFINITION_REF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL3Package.Literals.WORK_DEFINITION_REF__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkDefinitionRefAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WorkSequenceRef returns WorkSequenceRef
	 *
	 * Constraint:
	 *     (predecessor=[WorkDefinitionRef|ID] linkType=WorkSequenceType successor=[WorkDefinitionRef|ID])
	 * </pre>
	 */
	protected void sequence_WorkSequenceRef(ISerializationContext context, WorkSequenceRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PDL3Package.Literals.WORK_SEQUENCE_REF__PREDECESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL3Package.Literals.WORK_SEQUENCE_REF__PREDECESSOR));
			if (transientValues.isValueTransient(semanticObject, PDL3Package.Literals.WORK_SEQUENCE_REF__LINK_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL3Package.Literals.WORK_SEQUENCE_REF__LINK_TYPE));
			if (transientValues.isValueTransient(semanticObject, PDL3Package.Literals.WORK_SEQUENCE_REF__SUCCESSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PDL3Package.Literals.WORK_SEQUENCE_REF__SUCCESSOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWorkSequenceRefAccess().getPredecessorWorkDefinitionRefIDTerminalRuleCall_0_0_1(), semanticObject.eGet(PDL3Package.Literals.WORK_SEQUENCE_REF__PREDECESSOR, false));
		feeder.accept(grammarAccess.getWorkSequenceRefAccess().getLinkTypeWorkSequenceTypeEnumRuleCall_1_0(), semanticObject.getLinkType());
		feeder.accept(grammarAccess.getWorkSequenceRefAccess().getSuccessorWorkDefinitionRefIDTerminalRuleCall_2_0_1(), semanticObject.eGet(PDL3Package.Literals.WORK_SEQUENCE_REF__SUCCESSOR, false));
		feeder.finish();
	}
	
	
}
